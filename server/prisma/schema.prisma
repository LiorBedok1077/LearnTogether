// Prisma schema for cockroachDB [v_01]
// The following models are currently temprorary and will not necessarily stay the same during development.npx

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model Users {
    // user data:
    user_id                 String                  @id @default(uuid())
    username                String                  @unique
    email                   String                  @unique
    full_name               String
    password                String
    created_at              DateTime                @default(now())
    role                    Roles?
    profile_pic_src         String?
    // personal data:
    phone_number            String?
    gender                  GenderEnum              @default(MALE)
    bio                     String?
    interests               String[]
    prefered_langs          PreferedLanguagesEnum[]
    favorite_tags           Favorite_tags[]
    // stars for user
    num_stars               Int                     @default(0)
    star_id                 String?
    star_giver              Users?                  @relation("StarredUser", fields: [star_id], references: [user_id])
    stars_given             Users[]                 @relation("StarredUser")
    // articles, liked_articles
    articles                Articles[]              @relation("Articles")
    liked_article_user      Articles[]              @relation("UsersLiked") // -- keep track of liked articles!
    // comments, liked_comments
    comments                Comments[]              @relation("CreatedComments")
    liked_comments          Comments[]              @relation("LikedComments") // -- keep track of liked comments!
    // groups, participating_groups
    groups                  Learning_groups[]       @relation("CreatedGroups")
    participating_groups    Learning_groups[]       @relation("Participants") // -- keep track of participating groups!
    // notifications
    notifications           Notification[]
    last_seen_notifications DateTime                @default(now())
    // roles data (according to role access–modifier):
    // — (teacher_data, admin_data, etc) — 
    // cms
    num_viewed_profile      Int                     @default(0)
    num_edited_profile      Int                     @default(0)
}

model Learning_groups {
    group_id      String   @id @default(uuid())
    // creator relation
    creator_id    String
    creator       Users    @relation("CreatedGroups", fields: [creator_id], references: [user_id])
    // participants
    participants  Users[]  @relation("Participants")
    // group_tags
    tags          String[]
    // data
    thumbnail_src String?
    title         String
    description   String
    goals         String[]
    progress      Int
}

model Articles {
    article_id    String     @id @default(uuid())
    // creator relation
    creator_id    String
    creator       Users      @relation("Articles", fields: [creator_id], references: [user_id])
    // users_liked relations
    likes         Users[]    @relation("UsersLiked")
    // tags relations
    tags          String[]
    // comments relations
    comments      Comments[]
    // data
    created_at    DateTime   @default(now())
    updated_at    DateTime?  @updatedAt
    thumbnail_src String
    title         String
    content       String
    num_views     Int
}

model Comments {
    comment_id String    @id @default(uuid())
    // creator relation
    author_id  String
    author     Users     @relation("CreatedComments", fields: [author_id], references: [user_id])
    // article relation
    article_id String
    article    Articles  @relation(fields: [article_id], references: [article_id])
    // users_liked relation
    likes      Users[]   @relation("LikedComments")
    // data
    created_at DateTime  @default(now())
    updated_at DateTime? @updatedAt
    data       String
}

model Roles {
    id                String      @id @default(uuid())
    user_id           String      @unique
    user              Users       @relation(fields: [user_id], references: [user_id])
    // data
    role_name         String
    min_rate          Int?
    accessable_pages  PagesEnum[]
    accessable_routes PagesEnum[]
}

// [Tags] model is temporary and will move to elasticsearch later
// model Tags {
//     group_id          String
//     group             Learning_groups? @relation(fields: [group_id], references: [group_id])
//     article_id        String
//     article           Articles?        @relation(fields: [article_id], references: [article_id])
//     data
//     tag_name          String           @id @unique
//     num_articles_used Int              @default(0)
//     num_groups_used   Int              @default(0)
//     num_tutors_used   Int              @default(0)
//     Favorite_tags     Favorite_tags[]
// }

model Favorite_tags {
    id         String @id @default(uuid())
    // user relation
    user_id    String @unique
    user       Users  @relation(fields: [user_id], references: [user_id])
    // tag relation
    // tag        Tags   @relation(fields: [tag_name], references: [tag_name])
    // data
    tag_name   String
    num_viewed Int    @default(0)
}

model Notification {
    id            String   @id @default(uuid())
    // user relation
    user_id       String
    user          Users    @relation(fields: [user_id], references: [user_id])
    // data
    user_pic_src  String?
    thumbnail_src String?
    created_at    DateTime @default(now())
    title         String
    description   String
    link          String?
}

// enums

enum GenderEnum {
    MALE
    FEMALE
    OTHER
    RATHER_NOT_TO_SAY
    HELICOPTER
}

enum PreferedLanguagesEnum {
    ARABIC
    ENGLISH
    FRENCH
    HEBREW
    KOREAN
    RUSSIAN
    SPANISH
}

enum PagesEnum {
    ONE
    TWO
    FOUR
}
